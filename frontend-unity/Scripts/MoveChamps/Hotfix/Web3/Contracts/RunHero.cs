//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : MetaMask Unity SDK ABI Code Generator
//   Input filename:  RunHero.sol
//   Output filename: RunHero.cs
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------

#if MetamaskPlugin


using System;
using System.Numerics;
using System.Threading.Tasks;
using evm.net;
using evm.net.Models;

namespace RunHeroContract
{
	#if  (UNITY_EDITOR || !ENABLE_MONO)
	[BackedType(typeof(RunHeroContractBacking))]
	#endif
	public interface RunHeroContract : IContract
	{
		[EvmConstructorMethod]
		Task<RunHeroContract> DeployNew(String name, String symbol, CallOptions options = default);
		
		[EvmMethodInfo(Name = "_approveInfos", View = true)]
		Task<Tuple<Boolean, BigInteger>> _approveInfos([EvmParameterInfo(Type = "address", Name = "")] EvmAddress address, CallOptions options = default);
		
		[EvmMethodInfo(Name = "_attrs", View = true)]
		Task<Tuple<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>> _attrs([EvmParameterInfo(Type = "uint256", Name = "")] BigInteger address, CallOptions options = default);
		
		[EvmMethodInfo(Name = "_batchNum", View = true)]
		Task<BigInteger> _batchNum();
		
		[EvmMethodInfo(Name = "_currentSupply", View = true)]
		Task<BigInteger> _currentSupply();
		
		[EvmMethodInfo(Name = "_totalSupply", View = true)]
		Task<BigInteger> _totalSupply();
		
		[EvmMethodInfo(Name = "approve", View = false)]
		Task<Transaction> Approve(EvmAddress to, BigInteger tokenId, CallOptions options = default);
		
		[EvmMethodInfo(Name = "approveGame", View = false)]
		Task<Transaction> ApproveGame(Boolean en, CallOptions options = default);
		
		[EvmMethodInfo(Name = "balanceOf", View = true)]
		Task<BigInteger> BalanceOf(EvmAddress owner, CallOptions options = default);
		
		[EvmMethodInfo(Name = "baseURI", View = true)]
		Task<String> BaseURI();
		
		[EvmMethodInfo(Name = "batchTransfer", View = false)]
		Task<Transaction> BatchTransfer(EvmAddress from, EvmAddress to, BigInteger[] tokenidlist, CallOptions options = default);
		
		[EvmMethodInfo(Name = "consume", View = false)]
		Task<Transaction> Consume(BigInteger tokenId, CallOptions options = default);
		
		[EvmMethodInfo(Name = "empower", View = false)]
		Task<Transaction> Empower(BigInteger tokenId, BigInteger amount, CallOptions options = default);
		
		[EvmMethodInfo(Name = "freezeDuration", View = true)]
		Task<BigInteger> FreezeDuration();
		
		[EvmMethodInfo(Name = "fulfillAttr", View = false)]
		Task<Transaction> FulfillAttr(BigInteger tokenid, BigInteger rarity, BigInteger talent, BigInteger runningSpeed, BigInteger swimmingSpeed, BigInteger climbingSpeed, BigInteger flightSpeed, BigInteger energy, CallOptions options = default);
		
		[EvmMethodInfo(Name = "getApproved", View = true)]
		Task<EvmAddress> GetApproved(BigInteger tokenId, CallOptions options = default);
		
		[EvmMethodInfo(Name = "getAttrByTokenId", View = true)]
		Task<Attr> GetAttrByTokenId(BigInteger tokenId, CallOptions options = default);
		
		[EvmMethodInfo(Name = "getCurrentSupply", View = true)]
		Task<BigInteger> GetCurrentSupply();
		
		[EvmMethodInfo(Name = "isApprovedForAll", View = true)]
		Task<Boolean> IsApprovedForAll(EvmAddress owner, [EvmParameterInfo(Type = "address", Name = "operator")] EvmAddress @operator, CallOptions options = default);
		
		[EvmMethodInfo(Name = "isOperator", View = true)]
		Task<Boolean> IsOperator(EvmAddress who, CallOptions options = default);
		
		[EvmMethodInfo(Name = "mint", View = false)]
		Task<Transaction> Mint(EvmAddress to, BigInteger tokenid, CallOptions options = default);
		
		[EvmMethodInfo(Name = "name", View = true)]
		Task<String> Name();
		
		[EvmMethodInfo(Name = "owner", View = true)]
		Task<EvmAddress> Owner();
		
		[EvmMethodInfo(Name = "ownerOf", View = true)]
		Task<EvmAddress> OwnerOf(BigInteger tokenId, CallOptions options = default);
		
		[EvmMethodInfo(Name = "pause", View = false)]
		Task<Transaction> Pause();
		
		[EvmMethodInfo(Name = "paused", View = true)]
		Task<Boolean> Paused();
		
		[EvmMethodInfo(Name = "renounceOwnership", View = false)]
		Task<Transaction> RenounceOwnership();
		
		[EvmMethodInfo(Name = "safeTransferFrom", View = false)]
		Task<Transaction> SafeTransferFrom(EvmAddress from, EvmAddress to, BigInteger tokenId, CallOptions options = default);
		
		[EvmMethodInfo(Name = "safeTransferFrom", View = false)]
		Task<Transaction> SafeTransferFrom(EvmAddress from, EvmAddress to, BigInteger tokenId, Byte[] data, CallOptions options = default);
		
		[EvmMethodInfo(Name = "setApprovalForAll", View = false)]
		Task<Transaction> SetApprovalForAll([EvmParameterInfo(Type = "address", Name = "operator")] EvmAddress @operator, Boolean approved, CallOptions options = default);
		
		[EvmMethodInfo(Name = "setBaseUri", View = false)]
		Task<Transaction> SetBaseUri(String uri, CallOptions options = default);
		
		[EvmMethodInfo(Name = "setBatchNum", View = false)]
		Task<Transaction> SetBatchNum(BigInteger batchNum, CallOptions options = default);
		
		[EvmMethodInfo(Name = "setOperator", View = false)]
		Task<Transaction> SetOperator([EvmParameterInfo(Type = "address", Name = "operator")] EvmAddress @operator, Boolean enabled, CallOptions options = default);
		
		[EvmMethodInfo(Name = "supportsInterface", View = true)]
		Task<Boolean> SupportsInterface([EvmParameterInfo(Type = "bytes4", Name = "interfaceId")] Byte[] interfaceId, CallOptions options = default);
		
		[EvmMethodInfo(Name = "symbol", View = true)]
		Task<String> Symbol();
		
		[EvmMethodInfo(Name = "tokenURI", View = true)]
		Task<String> TokenURI(BigInteger tokenId, CallOptions options = default);
		
		[EvmMethodInfo(Name = "transferFrom", View = false)]
		Task<Transaction> TransferFrom(EvmAddress from, EvmAddress to, BigInteger tokenId, CallOptions options = default);
		
		[EvmMethodInfo(Name = "transferOwnership", View = false)]
		Task<Transaction> TransferOwnership(EvmAddress newOwner, CallOptions options = default);
		
		[EvmMethodInfo(Name = "unpause", View = false)]
		Task<Transaction> Unpause();
		
		[EvmMethodInfo(Name = "updateFreezeDuration", View = false)]
		Task<Transaction> UpdateFreezeDuration(BigInteger duration, CallOptions options = default);
		
		[EvmMethodInfo(Name = "upgrade", View = false)]
		Task<Transaction> Upgrade(BigInteger tokenid, BigInteger plusRun, BigInteger plusSwim, BigInteger plusFlight, BigInteger plusClimb, CallOptions options = default);
		
	}
}
#endif