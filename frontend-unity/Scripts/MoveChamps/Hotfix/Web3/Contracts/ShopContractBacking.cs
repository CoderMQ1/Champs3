//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : MetaMask Unity SDK ABI Code Generator
//   Input filename:  Shop.sol
//   Output filename: ShopBacking.cs
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------

#if MetamaskPlugin &&( UNITY_EDITOR || !ENABLE_MONO)
using System;
using System.Numerics;
using System.Threading.Tasks;
using evm.net;
using evm.net.Models;

namespace ShopContract
{
	public class ShopContractBacking : Contract, ShopContract
	{
		public string Address
		{
			get => base.Address;
		}
		public ShopContractBacking(IProvider provider, EvmAddress address, Type interfaceType) : base(provider, address, interfaceType)
		{
		}
		public Task<ShopContract> DeployNew()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<ShopContract>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "buyGood", View = false)]
		public Task<Transaction> BuyGood(BigInteger itemId, BigInteger amount, CallOptions options = default)
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Transaction>) InvokeMethod(method, new object[] { itemId, amount, options });
		}
		
		[EvmMethodInfo(Name = "gameAsset", View = true)]
		public Task<EvmAddress> GameAsset()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<EvmAddress>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "gameConfg", View = true)]
		public Task<EvmAddress> GameConfg()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<EvmAddress>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "goodExist", View = true)]
		public Task<Boolean> GoodExist([EvmParameterInfo(Type = "uint256", Name = "")] BigInteger id, CallOptions options = default)
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Boolean>) InvokeMethod(method, new object[] { id, options });
		}
		
		[EvmMethodInfo(Name = "loadShopSet", View = false)]
		public Task<Transaction> LoadShopSet(EvmAddress gameConfigContract, EvmAddress gameAssetContract, CallOptions options = default)
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Transaction>) InvokeMethod(method, new object[] { gameConfigContract, gameAssetContract, options });
		}
		
		[EvmMethodInfo(Name = "owner", View = true)]
		public Task<EvmAddress> Owner()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<EvmAddress>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "payToken", View = true)]
		public Task<EvmAddress> PayToken()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<EvmAddress>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "receiver", View = true)]
		public Task<EvmAddress> Receiver()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<EvmAddress>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "renounceOwnership", View = false)]
		public Task<Transaction> RenounceOwnership()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Transaction>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "shopGoodItems", View = true)]
		public Task<Tuple<BigInteger, BigInteger, BigInteger>> ShopGoodItems([EvmParameterInfo(Type = "uint256", Name = "")] BigInteger id, CallOptions options = default)
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Tuple<BigInteger, BigInteger, BigInteger>>) InvokeMethod(method, new object[] { id, options });
		}
		
		[EvmMethodInfo(Name = "transferOwnership", View = false)]
		public Task<Transaction> TransferOwnership(EvmAddress newOwner, CallOptions options = default)
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Transaction>) InvokeMethod(method, new object[] { newOwner, options });
		}
		
	}
}
#endif
