//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : MetaMask Unity SDK ABI Code Generator
//   Input filename:  RunHero.sol
//   Output filename: RunHeroBacking.cs
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------

#if MetamaskPlugin && (UNITY_EDITOR || !ENABLE_MONO)
using System;
using System.Numerics;
using System.Threading.Tasks;
using evm.net;
using evm.net.Models;

namespace RunHeroContract
{
	public class RunHeroContractBacking : Contract, RunHeroContract
	{
		public string Address
		{
			get => base.Address;
		}
		public RunHeroContractBacking(IProvider provider, EvmAddress address, Type interfaceType) : base(provider, address, interfaceType)
		{
		}
		public Task<RunHeroContract> DeployNew(String name, String symbol, CallOptions options = default)
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<RunHeroContract>) InvokeMethod(method, new object[] { name, symbol, options });
		}
		
		[EvmMethodInfo(Name = "_approveInfos", View = true)]
		public Task<Tuple<Boolean, BigInteger>> _approveInfos([EvmParameterInfo(Type = "address", Name = "")] EvmAddress address, CallOptions options = default)
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Tuple<Boolean, BigInteger>>) InvokeMethod(method, new object[] { address, options });
		}
		
		[EvmMethodInfo(Name = "_attrs", View = true)]
		public Task<Tuple<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>> _attrs([EvmParameterInfo(Type = "uint256", Name = "")] BigInteger address, CallOptions options = default)
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Tuple<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>) InvokeMethod(method, new object[] { address, options });
		}
		
		[EvmMethodInfo(Name = "_batchNum", View = true)]
		public Task<BigInteger> _batchNum()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<BigInteger>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "_currentSupply", View = true)]
		public Task<BigInteger> _currentSupply()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<BigInteger>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "_totalSupply", View = true)]
		public Task<BigInteger> _totalSupply()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<BigInteger>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "approve", View = false)]
		public Task<Transaction> Approve(EvmAddress to, BigInteger tokenId, CallOptions options = default)
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Transaction>) InvokeMethod(method, new object[] { to, tokenId, options });
		}
		
		[EvmMethodInfo(Name = "approveGame", View = false)]
		public Task<Transaction> ApproveGame(Boolean en, CallOptions options = default)
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Transaction>) InvokeMethod(method, new object[] { en, options });
		}
		
		[EvmMethodInfo(Name = "balanceOf", View = true)]
		public Task<BigInteger> BalanceOf(EvmAddress owner, CallOptions options = default)
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<BigInteger>) InvokeMethod(method, new object[] { owner, options });
		}
		
		[EvmMethodInfo(Name = "baseURI", View = true)]
		public Task<String> BaseURI()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<String>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "batchTransfer", View = false)]
		public Task<Transaction> BatchTransfer(EvmAddress from, EvmAddress to, BigInteger[] tokenidlist, CallOptions options = default)
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Transaction>) InvokeMethod(method, new object[] { from, to, tokenidlist, options });
		}
		
		[EvmMethodInfo(Name = "consume", View = false)]
		public Task<Transaction> Consume(BigInteger tokenId, CallOptions options = default)
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Transaction>) InvokeMethod(method, new object[] { tokenId, options });
		}
		
		[EvmMethodInfo(Name = "empower", View = false)]
		public Task<Transaction> Empower(BigInteger tokenId, BigInteger amount, CallOptions options = default)
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Transaction>) InvokeMethod(method, new object[] { tokenId, amount, options });
		}
		
		[EvmMethodInfo(Name = "freezeDuration", View = true)]
		public Task<BigInteger> FreezeDuration()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<BigInteger>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "fulfillAttr", View = false)]
		public Task<Transaction> FulfillAttr(BigInteger tokenid, BigInteger rarity, BigInteger talent, BigInteger runningSpeed, BigInteger swimmingSpeed, BigInteger climbingSpeed, BigInteger flightSpeed, BigInteger energy, CallOptions options = default)
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Transaction>) InvokeMethod(method, new object[] { tokenid, rarity, talent, runningSpeed, swimmingSpeed, climbingSpeed, flightSpeed, energy, options });
		}
		
		[EvmMethodInfo(Name = "getApproved", View = true)]
		public Task<EvmAddress> GetApproved(BigInteger tokenId, CallOptions options = default)
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<EvmAddress>) InvokeMethod(method, new object[] { tokenId, options });
		}
		
		[EvmMethodInfo(Name = "getAttrByTokenId", View = true)]
		public Task<Attr> GetAttrByTokenId(BigInteger tokenId, CallOptions options = default)
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Attr>) InvokeMethod(method, new object[] { tokenId, options });
		}
		
		[EvmMethodInfo(Name = "getCurrentSupply", View = true)]
		public Task<BigInteger> GetCurrentSupply()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<BigInteger>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "isApprovedForAll", View = true)]
		public Task<Boolean> IsApprovedForAll(EvmAddress owner, [EvmParameterInfo(Type = "address", Name = "operator")] EvmAddress @operator, CallOptions options = default)
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Boolean>) InvokeMethod(method, new object[] { owner, @operator, options });
		}
		
		[EvmMethodInfo(Name = "isOperator", View = true)]
		public Task<Boolean> IsOperator(EvmAddress who, CallOptions options = default)
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Boolean>) InvokeMethod(method, new object[] { who, options });
		}
		
		[EvmMethodInfo(Name = "mint", View = false)]
		public Task<Transaction> Mint(EvmAddress to, BigInteger tokenid, CallOptions options = default)
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Transaction>) InvokeMethod(method, new object[] { to, tokenid, options });
		}
		
		[EvmMethodInfo(Name = "name", View = true)]
		public Task<String> Name()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<String>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "owner", View = true)]
		public Task<EvmAddress> Owner()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<EvmAddress>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "ownerOf", View = true)]
		public Task<EvmAddress> OwnerOf(BigInteger tokenId, CallOptions options = default)
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<EvmAddress>) InvokeMethod(method, new object[] { tokenId, options });
		}
		
		[EvmMethodInfo(Name = "pause", View = false)]
		public Task<Transaction> Pause()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Transaction>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "paused", View = true)]
		public Task<Boolean> Paused()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Boolean>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "renounceOwnership", View = false)]
		public Task<Transaction> RenounceOwnership()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Transaction>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "safeTransferFrom", View = false)]
		public Task<Transaction> SafeTransferFrom(EvmAddress from, EvmAddress to, BigInteger tokenId, CallOptions options = default)
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Transaction>) InvokeMethod(method, new object[] { from, to, tokenId, options });
		}
		
		[EvmMethodInfo(Name = "safeTransferFrom", View = false)]
		public Task<Transaction> SafeTransferFrom(EvmAddress from, EvmAddress to, BigInteger tokenId, Byte[] data, CallOptions options = default)
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Transaction>) InvokeMethod(method, new object[] { from, to, tokenId, data, options });
		}
		
		[EvmMethodInfo(Name = "setApprovalForAll", View = false)]
		public Task<Transaction> SetApprovalForAll([EvmParameterInfo(Type = "address", Name = "operator")] EvmAddress @operator, Boolean approved, CallOptions options = default)
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Transaction>) InvokeMethod(method, new object[] { @operator, approved, options });
		}
		
		[EvmMethodInfo(Name = "setBaseUri", View = false)]
		public Task<Transaction> SetBaseUri(String uri, CallOptions options = default)
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Transaction>) InvokeMethod(method, new object[] { uri, options });
		}
		
		[EvmMethodInfo(Name = "setBatchNum", View = false)]
		public Task<Transaction> SetBatchNum(BigInteger batchNum, CallOptions options = default)
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Transaction>) InvokeMethod(method, new object[] { batchNum, options });
		}
		
		[EvmMethodInfo(Name = "setOperator", View = false)]
		public Task<Transaction> SetOperator([EvmParameterInfo(Type = "address", Name = "operator")] EvmAddress @operator, Boolean enabled, CallOptions options = default)
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Transaction>) InvokeMethod(method, new object[] { @operator, enabled, options });
		}
		
		[EvmMethodInfo(Name = "supportsInterface", View = true)]
		public Task<Boolean> SupportsInterface([EvmParameterInfo(Type = "bytes4", Name = "interfaceId")] Byte[] interfaceId, CallOptions options = default)
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Boolean>) InvokeMethod(method, new object[] { interfaceId, options });
		}
		
		[EvmMethodInfo(Name = "symbol", View = true)]
		public Task<String> Symbol()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<String>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "tokenURI", View = true)]
		public Task<String> TokenURI(BigInteger tokenId, CallOptions options = default)
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<String>) InvokeMethod(method, new object[] { tokenId, options });
		}
		
		[EvmMethodInfo(Name = "transferFrom", View = false)]
		public Task<Transaction> TransferFrom(EvmAddress from, EvmAddress to, BigInteger tokenId, CallOptions options = default)
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Transaction>) InvokeMethod(method, new object[] { from, to, tokenId, options });
		}
		
		[EvmMethodInfo(Name = "transferOwnership", View = false)]
		public Task<Transaction> TransferOwnership(EvmAddress newOwner, CallOptions options = default)
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Transaction>) InvokeMethod(method, new object[] { newOwner, options });
		}
		
		[EvmMethodInfo(Name = "unpause", View = false)]
		public Task<Transaction> Unpause()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Transaction>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "updateFreezeDuration", View = false)]
		public Task<Transaction> UpdateFreezeDuration(BigInteger duration, CallOptions options = default)
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Transaction>) InvokeMethod(method, new object[] { duration, options });
		}
		
		[EvmMethodInfo(Name = "upgrade", View = false)]
		public Task<Transaction> Upgrade(BigInteger tokenid, BigInteger plusRun, BigInteger plusSwim, BigInteger plusFlight, BigInteger plusClimb, CallOptions options = default)
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Transaction>) InvokeMethod(method, new object[] { tokenid, plusRun, plusSwim, plusFlight, plusClimb, options });
		}
		
	}
}
#endif
