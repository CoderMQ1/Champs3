//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : MetaMask Unity SDK ABI Code Generator
//   Input filename:  GameLogicContract.sol
//   Output filename: GameLogicContract.cs
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------
#if MetamaskPlugin
using System;
using System.Numerics;
using System.Threading.Tasks;
using evm.net;
using evm.net.Models;

namespace GameLogicContract
{
	#if UNITY_EDITOR || !ENABLE_MONO
	[BackedType(typeof(GameLogicContractBacking))]
	#endif
	public interface GameLogicContract : IContract
	{
		[EvmConstructorMethod]
		Task<GameLogicContract> DeployNew();
		
		[EvmMethodInfo(Name = "LastUpdatePvpFeeTime", View = true)]
		Task<BigInteger> LastUpdatePvpFeeTime();
		
		[EvmMethodInfo(Name = "LuckSpinRewardPumps", View = true)]
		Task<Tuple<BigInteger, BigInteger, BigInteger>> LuckSpinRewardPumps([EvmParameterInfo(Type = "uint256", Name = "")] BigInteger result, CallOptions options = default);
		
		[EvmMethodInfo(Name = "PvpFee", View = true)]
		Task<BigInteger> PvpFee();
		
		[EvmMethodInfo(Name = "exchangeEnergy", View = false)]
		Task<Transaction> ExchangeEnergy(BigInteger tokenId, BigInteger amount, CallOptions options = default);
		
		[EvmMethodInfo(Name = "gameAsset", View = true)]
		Task<EvmAddress> GameAsset();
		
		[EvmMethodInfo(Name = "gameConfig", View = true)]
		Task<EvmAddress> GameConfig();
		

		
		[EvmMethodInfo(Name = "gameRoom", View = true)]
		Task<Tuple<BigInteger, BigInteger>> GameRoom();
		
		[EvmMethodInfo(Name = "heroToken", View = true)]
		Task<EvmAddress> HeroToken();
		
		[EvmMethodInfo(Name = "isAdmin", View = true)]
		Task<Boolean> IsAdmin(EvmAddress user, CallOptions options = default);
		
		[EvmMethodInfo(Name = "owner", View = true)]
		Task<EvmAddress> Owner();
		
		[EvmMethodInfo(Name = "renounceOwnership", View = false)]
		Task<Transaction> RenounceOwnership();
		
		[EvmMethodInfo(Name = "roleNft", View = true)]
		Task<EvmAddress> RoleNft();
		
		[EvmMethodInfo(Name = "roleUpgrade", View = false)]
		Task<Transaction> RoleUpgrade(BigInteger tokenId, CallOptions options = default);
		
		[EvmMethodInfo(Name = "setAdmin", View = false)]
		Task<Transaction> SetAdmin(EvmAddress user, Boolean enabled, CallOptions options = default);
		
		[EvmMethodInfo(Name = "setAssetContract", View = false)]
		Task<Transaction> SetAssetContract(EvmAddress gameAssetContract, BigInteger batteryItemId, CallOptions options = default);
		
		[EvmMethodInfo(Name = "setGameData", View = false)]
		Task<Transaction> SetGameData(EvmAddress gameConfigContract, CallOptions options = default);
		
		[EvmMethodInfo(Name = "spin", View = true)]
		Task<EvmAddress> Spin();
		
		[EvmMethodInfo(Name = "startPvpGame", View = false)]
		Task<Transaction> StartPvpGame();
		
		[EvmMethodInfo(Name = "transferOwnership", View = false)]
		Task<Transaction> TransferOwnership(EvmAddress newOwner, CallOptions options = default);
		
		[EvmMethodInfo(Name = "upgradeInfo", View = true)]
		Task<EvmAddress> UpgradeInfo();
		
		[EvmMethodInfo(Name = "upgradePayToken", View = true)]
		Task<EvmAddress> UpgradePayToken();
		
	}
}
#endif