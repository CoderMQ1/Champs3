//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : MetaMask Unity SDK ABI Code Generator
//   Input filename:  SpinContract.sol
//   Output filename: SpinContract.cs
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------

#if MetamaskPlugin

using System;
using System.Numerics;
using System.Threading.Tasks;
using evm.net;
using evm.net.Models;

namespace SpinContract
{
	#if UNITY_EDITOR || !ENABLE_MONO
	[BackedType(typeof(SpinContractBacking))]
	#endif
	public interface SpinContract : IContract
	{
		[EvmConstructorMethod]
		Task<SpinContract> DeployNew();
		
		[EvmMethodInfo(Name = "BonusPool", View = true)]
		Task<BigInteger> BonusPool();
		
		[EvmMethodInfo(Name = "GameAsset", View = true)]
		Task<EvmAddress> GameAsset();
		
		[EvmMethodInfo(Name = "GameConfig", View = true)]
		Task<EvmAddress> GameConfig();
		
		[EvmMethodInfo(Name = "HeroToken", View = true)]
		Task<EvmAddress> HeroToken();
		
		[EvmMethodInfo(Name = "JackId", View = true)]
		Task<BigInteger> JackId();
		
		[EvmMethodInfo(Name = "JackPot", View = true)]
		Task<BigInteger> JackPot();
		
		[EvmMethodInfo(Name = "SpinCostItemId", View = true)]
		Task<BigInteger> SpinCostItemId();
		
		[EvmMethodInfo(Name = "SpinRewards", View = true)]
		Task<Tuple<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>> SpinRewards([EvmParameterInfo(Type = "uint256", Name = "")] BigInteger num, CallOptions options = default);
		
		[EvmMethodInfo(Name = "SpinTotalTimes", View = true)]
		Task<BigInteger> SpinTotalTimes();
		
		[EvmMethodInfo(Name = "TotalWeight", View = true)]
		Task<BigInteger> TotalWeight();
		
		[EvmMethodInfo(Name = "addBonusPool", View = false)]
		Task<Transaction> AddBonusPool(BigInteger amount, CallOptions options = default);
		
		[EvmMethodInfo(Name = "doSpin", View = false)]
		Task<Transaction> DoSpin(BigInteger spinId, EvmAddress player, BigInteger vrf, CallOptions options = default);
		
		[EvmMethodInfo(Name = "getRequestStatus", View = true)]
		Task<BigInteger> GetRequestStatus(BigInteger _requestId, CallOptions options = default);
		
		[EvmMethodInfo(Name = "loadLuckSpinSet", View = false)]
		Task<Transaction> LoadLuckSpinSet(EvmAddress gameConfigContract, EvmAddress gameAssetContract, EvmAddress heroTokenContract, BigInteger spinCostItemId, CallOptions options = default);
		
		[EvmMethodInfo(Name = "owner", View = true)]
		Task<EvmAddress> Owner();
		
		[EvmMethodInfo(Name = "rawFulfillRandomWords", View = false)]
		Task<Transaction> RawFulfillRandomWords(BigInteger _requestId, BigInteger[] _randomWords, CallOptions options = default);
		
		[EvmMethodInfo(Name = "requestRandomWords", View = false)]
		Task<Transaction> RequestRandomWords(BigInteger spinId, CallOptions options = default);
		
		[EvmMethodInfo(Name = "s_requests", View = true)]
		Task<Tuple<BigInteger, Boolean>> S_requests([EvmParameterInfo(Type = "uint256", Name = "")] BigInteger num, CallOptions options = default);
		
		[EvmMethodInfo(Name = "spinSetInit", View = true)]
		Task<Boolean> SpinSetInit();
		
	}
}

#endif