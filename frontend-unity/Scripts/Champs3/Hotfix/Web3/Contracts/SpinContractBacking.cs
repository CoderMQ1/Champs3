//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : MetaMask Unity SDK ABI Code Generator
//   Input filename:  SpinContract.sol
//   Output filename: SpinContractBacking.cs
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------

#if MetamaskPlugin

#if UNITY_EDITOR || !ENABLE_MONO
using System;
using System.Numerics;
using System.Threading.Tasks;
using evm.net;
using evm.net.Models;

namespace SpinContract
{
	public class SpinContractBacking : Contract, SpinContract
	{
		public string Address
		{
			get => base.Address;
		}
		public SpinContractBacking(IProvider provider, EvmAddress address, Type interfaceType) : base(provider, address, interfaceType)
		{
		}
		public Task<SpinContract> DeployNew()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<SpinContract>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "BonusPool", View = true)]
		public Task<BigInteger> BonusPool()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<BigInteger>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "GameAsset", View = true)]
		public Task<EvmAddress> GameAsset()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<EvmAddress>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "GameConfig", View = true)]
		public Task<EvmAddress> GameConfig()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<EvmAddress>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "HeroToken", View = true)]
		public Task<EvmAddress> HeroToken()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<EvmAddress>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "JackId", View = true)]
		public Task<BigInteger> JackId()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<BigInteger>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "JackPot", View = true)]
		public Task<BigInteger> JackPot()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<BigInteger>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "SpinCostItemId", View = true)]
		public Task<BigInteger> SpinCostItemId()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<BigInteger>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "SpinRewards", View = true)]
		public Task<Tuple<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>> SpinRewards([EvmParameterInfo(Type = "uint256", Name = "")] BigInteger num, CallOptions options = default)
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Tuple<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>) InvokeMethod(method, new object[] { num, options });
		}
		
		[EvmMethodInfo(Name = "SpinTotalTimes", View = true)]
		public Task<BigInteger> SpinTotalTimes()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<BigInteger>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "TotalWeight", View = true)]
		public Task<BigInteger> TotalWeight()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<BigInteger>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "addBonusPool", View = false)]
		public Task<Transaction> AddBonusPool(BigInteger amount, CallOptions options = default)
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Transaction>) InvokeMethod(method, new object[] { amount, options });
		}
		
		[EvmMethodInfo(Name = "doSpin", View = false)]
		public Task<Transaction> DoSpin(BigInteger spinId, EvmAddress player, BigInteger vrf, CallOptions options = default)
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Transaction>) InvokeMethod(method, new object[] { spinId, player, vrf, options });
		}
		
		[EvmMethodInfo(Name = "getRequestStatus", View = true)]
		public Task<BigInteger> GetRequestStatus(BigInteger _requestId, CallOptions options = default)
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<BigInteger>) InvokeMethod(method, new object[] { _requestId, options });
		}
		
		[EvmMethodInfo(Name = "loadLuckSpinSet", View = false)]
		public Task<Transaction> LoadLuckSpinSet(EvmAddress gameConfigContract, EvmAddress gameAssetContract, EvmAddress heroTokenContract, BigInteger spinCostItemId, CallOptions options = default)
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Transaction>) InvokeMethod(method, new object[] { gameConfigContract, gameAssetContract, heroTokenContract, spinCostItemId, options });
		}
		
		[EvmMethodInfo(Name = "owner", View = true)]
		public Task<EvmAddress> Owner()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<EvmAddress>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "rawFulfillRandomWords", View = false)]
		public Task<Transaction> RawFulfillRandomWords(BigInteger _requestId, BigInteger[] _randomWords, CallOptions options = default)
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Transaction>) InvokeMethod(method, new object[] { _requestId, _randomWords, options });
		}
		
		[EvmMethodInfo(Name = "requestRandomWords", View = false)]
		public Task<Transaction> RequestRandomWords(BigInteger spinId, CallOptions options = default)
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Transaction>) InvokeMethod(method, new object[] { spinId, options });
		}
		
		[EvmMethodInfo(Name = "s_requests", View = true)]
		public Task<Tuple<BigInteger, Boolean>> S_requests([EvmParameterInfo(Type = "uint256", Name = "")] BigInteger num, CallOptions options = default)
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Tuple<BigInteger, Boolean>>) InvokeMethod(method, new object[] { num, options });
		}
		
		[EvmMethodInfo(Name = "spinSetInit", View = true)]
		public Task<Boolean> SpinSetInit()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Boolean>) InvokeMethod(method, new object[] {  });
		}
		
	}
}
#endif

#endif