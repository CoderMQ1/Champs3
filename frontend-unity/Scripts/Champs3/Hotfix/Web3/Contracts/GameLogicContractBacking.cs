//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : MetaMask Unity SDK ABI Code Generator
//   Input filename:  GameLogicContract.sol
//   Output filename: GameLogicContractBacking.cs
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------

#if MetamaskPlugin &&( UNITY_EDITOR || !ENABLE_MONO)
using System;
using System.Numerics;
using System.Threading.Tasks;
using evm.net;
using evm.net.Models;

namespace GameLogicContract
{
	public class GameLogicContractBacking : Contract, GameLogicContract
	{
		public string Address
		{
			get => base.Address;
		}
		public GameLogicContractBacking(IProvider provider, EvmAddress address, Type interfaceType) : base(provider, address, interfaceType)
		{
		}
		public Task<GameLogicContract> DeployNew()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<GameLogicContract>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "LastUpdatePvpFeeTime", View = true)]
		public Task<BigInteger> LastUpdatePvpFeeTime()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<BigInteger>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "LuckSpinRewardPumps", View = true)]
		public Task<Tuple<BigInteger, BigInteger, BigInteger>> LuckSpinRewardPumps([EvmParameterInfo(Type = "uint256", Name = "")] BigInteger result, CallOptions options = default)
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Tuple<BigInteger, BigInteger, BigInteger>>) InvokeMethod(method, new object[] { result, options });
		}
		
		[EvmMethodInfo(Name = "PvpFee", View = true)]
		public Task<BigInteger> PvpFee()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<BigInteger>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "exchangeEnergy", View = false)]
		public Task<Transaction> ExchangeEnergy(BigInteger tokenId, BigInteger amount, CallOptions options = default)
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Transaction>) InvokeMethod(method, new object[] { tokenId, amount, options });
		}
		
		[EvmMethodInfo(Name = "gameAsset", View = true)]
		public Task<EvmAddress> GameAsset()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<EvmAddress>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "gameConfig", View = true)]
		public Task<EvmAddress> GameConfig()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<EvmAddress>) InvokeMethod(method, new object[] {  });
		}
		

		
		[EvmMethodInfo(Name = "gameRoom", View = true)]
		public Task<Tuple<BigInteger, BigInteger>> GameRoom()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Tuple<BigInteger, BigInteger>>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "heroToken", View = true)]
		public Task<EvmAddress> HeroToken()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<EvmAddress>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "isAdmin", View = true)]
		public Task<Boolean> IsAdmin(EvmAddress user, CallOptions options = default)
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Boolean>) InvokeMethod(method, new object[] { user, options });
		}
		
		[EvmMethodInfo(Name = "owner", View = true)]
		public Task<EvmAddress> Owner()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<EvmAddress>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "renounceOwnership", View = false)]
		public Task<Transaction> RenounceOwnership()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Transaction>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "roleNft", View = true)]
		public Task<EvmAddress> RoleNft()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<EvmAddress>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "roleUpgrade", View = false)]
		public Task<Transaction> RoleUpgrade(BigInteger tokenId, CallOptions options = default)
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Transaction>) InvokeMethod(method, new object[] { tokenId, options });
		}
		
		[EvmMethodInfo(Name = "setAdmin", View = false)]
		public Task<Transaction> SetAdmin(EvmAddress user, Boolean enabled, CallOptions options = default)
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Transaction>) InvokeMethod(method, new object[] { user, enabled, options });
		}
		
		[EvmMethodInfo(Name = "setAssetContract", View = false)]
		public Task<Transaction> SetAssetContract(EvmAddress gameAssetContract, BigInteger batteryItemId, CallOptions options = default)
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Transaction>) InvokeMethod(method, new object[] { gameAssetContract, batteryItemId, options });
		}
		
		[EvmMethodInfo(Name = "setGameData", View = false)]
		public Task<Transaction> SetGameData(EvmAddress gameConfigContract, CallOptions options = default)
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Transaction>) InvokeMethod(method, new object[] { gameConfigContract, options });
		}
		
		[EvmMethodInfo(Name = "spin", View = true)]
		public Task<EvmAddress> Spin()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<EvmAddress>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "startPvpGame", View = false)]
		public Task<Transaction> StartPvpGame()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Transaction>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "transferOwnership", View = false)]
		public Task<Transaction> TransferOwnership(EvmAddress newOwner, CallOptions options = default)
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Transaction>) InvokeMethod(method, new object[] { newOwner, options });
		}
		
		[EvmMethodInfo(Name = "upgradeInfo", View = true)]
		public Task<EvmAddress> UpgradeInfo()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<EvmAddress>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "upgradePayToken", View = true)]
		public Task<EvmAddress> UpgradePayToken()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<EvmAddress>) InvokeMethod(method, new object[] {  });
		}
		
	}
}
#endif
