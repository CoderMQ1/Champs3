//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : MetaMask Unity SDK ABI Code Generator
//   Input filename:  TokenContract.sol
//   Output filename: TokenContractBacking.cs
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------

#if MetamaskPlugin && (UNITY_EDITOR || !ENABLE_MONO)
using System;
using System.Numerics;
using System.Threading.Tasks;
using evm.net;
using evm.net.Models;

namespace TokenContract
{
	public class TokenContractBacking : Contract, TokenContract
	{
		public string Address
		{
			get => base.Address;
		}
		public TokenContractBacking(IProvider provider, EvmAddress address, Type interfaceType) : base(provider, address, interfaceType)
		{
		}
		public Task<TokenContract> DeployNew(BigInteger _initialAmount, String _tokenName, [EvmParameterInfo(Type = "uint8", Name = "_decimalUnits")] UInt16 _decimalUnits, String _tokenSymbol, CallOptions options = default)
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<TokenContract>) InvokeMethod(method, new object[] { _initialAmount, _tokenName, _decimalUnits, _tokenSymbol, options });
		}
		
		[EvmMethodInfo(Name = "_approveInfos", View = true)]
		public Task<Tuple<Boolean, BigInteger>> _approveInfos([EvmParameterInfo(Type = "address", Name = "")] EvmAddress address, CallOptions options = default)
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Tuple<Boolean, BigInteger>>) InvokeMethod(method, new object[] { address, options });
		}
		
		[EvmMethodInfo(Name = "allowance", View = true)]
		public Task<BigInteger> Allowance(EvmAddress _owner, EvmAddress _spender, CallOptions options = default)
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<BigInteger>) InvokeMethod(method, new object[] { _owner, _spender, options });
		}
		
		[EvmMethodInfo(Name = "allowed", View = true)]
		public Task<BigInteger> Allowed([EvmParameterInfo(Type = "address", Name = "")] EvmAddress address1, [EvmParameterInfo(Type = "address", Name = "")] EvmAddress address2, CallOptions options = default)
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<BigInteger>) InvokeMethod(method, new object[] { address1, address2, options });
		}
		
		[EvmMethodInfo(Name = "approve", View = false)]
		public Task<Transaction> Approve(EvmAddress _spender, BigInteger _value, CallOptions options = default)
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Transaction>) InvokeMethod(method, new object[] { _spender, _value, options });
		}
		
		[EvmMethodInfo(Name = "approveGame", View = false)]
		public Task<Transaction> ApproveGame(Boolean en, CallOptions options = default)
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Transaction>) InvokeMethod(method, new object[] { en, options });
		}
		
		[EvmMethodInfo(Name = "balanceOf", View = true)]
		public Task<BigInteger> BalanceOf(EvmAddress _owner, CallOptions options = default)
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<BigInteger>) InvokeMethod(method, new object[] { _owner, options });
		}
		
		[EvmMethodInfo(Name = "balances", View = true)]
		public Task<BigInteger> Balances([EvmParameterInfo(Type = "address", Name = "")] EvmAddress address, CallOptions options = default)
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<BigInteger>) InvokeMethod(method, new object[] { address, options });
		}
		
		[EvmMethodInfo(Name = "curMineAmount", View = true)]
		public Task<BigInteger> CurMineAmount()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<BigInteger>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "decay", View = true)]
		public Task<BigInteger> Decay()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<BigInteger>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "decayDiv", View = true)]
		public Task<BigInteger> DecayDiv()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<BigInteger>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "decimals", View = true)]
		[return: EvmParameterInfo(Type = "uint8")]
		public Task<UInt16> Decimals()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<UInt16>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "freezeDuration", View = true)]
		public Task<BigInteger> FreezeDuration()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<BigInteger>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "gameLogicContract", View = true)]
		public Task<EvmAddress> GameLogicContract()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<EvmAddress>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "getCurMinerInfo", View = true)]
		public Task<MineInfo> GetCurMinerInfo()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<MineInfo>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "isAdmin", View = true)]
		public Task<Boolean> IsAdmin(EvmAddress user, CallOptions options = default)
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Boolean>) InvokeMethod(method, new object[] { user, options });
		}
		
		[EvmMethodInfo(Name = "isApproveGameStop", View = true)]
		public Task<Boolean> IsApproveGameStop()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Boolean>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "mineRound", View = true)]
		public Task<BigInteger> MineRound()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<BigInteger>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "name", View = true)]
		public Task<String> Name()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<String>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "owner", View = true)]
		public Task<EvmAddress> Owner()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<EvmAddress>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "releaseToken", View = false)]
		public Task<Transaction> ReleaseToken()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Transaction>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "renounceOwnership", View = false)]
		public Task<Transaction> RenounceOwnership()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Transaction>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "setAdmin", View = false)]
		public Task<Transaction> SetAdmin(EvmAddress user, Boolean enabled, CallOptions options = default)
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Transaction>) InvokeMethod(method, new object[] { user, enabled, options });
		}
		
		[EvmMethodInfo(Name = "stopApproveGame", View = false)]
		public Task<Transaction> StopApproveGame(Boolean stopApprove, CallOptions options = default)
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Transaction>) InvokeMethod(method, new object[] { stopApprove, options });
		}
		
		[EvmMethodInfo(Name = "symbol", View = true)]
		public Task<String> Symbol()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<String>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "totalMineAmount", View = true)]
		public Task<BigInteger> TotalMineAmount()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<BigInteger>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "totalSupply", View = true)]
		public Task<BigInteger> TotalSupply()
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<BigInteger>) InvokeMethod(method, new object[] {  });
		}
		
		[EvmMethodInfo(Name = "transfer", View = false)]
		public Task<Transaction> Transfer(EvmAddress _to, BigInteger _value, CallOptions options = default)
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Transaction>) InvokeMethod(method, new object[] { _to, _value, options });
		}
		
		[EvmMethodInfo(Name = "transferFrom", View = false)]
		public Task<Transaction> TransferFrom(EvmAddress _from, EvmAddress _to, BigInteger _value, CallOptions options = default)
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Transaction>) InvokeMethod(method, new object[] { _from, _to, _value, options });
		}
		
		[EvmMethodInfo(Name = "transferOwnership", View = false)]
		public Task<Transaction> TransferOwnership(EvmAddress newOwner, CallOptions options = default)
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Transaction>) InvokeMethod(method, new object[] { newOwner, options });
		}
		
		[EvmMethodInfo(Name = "updateFreezeInfo", View = false)]
		public Task<Transaction> UpdateFreezeInfo(BigInteger duration, EvmAddress gameLogic, CallOptions options = default)
		{
			var method = System.Reflection.MethodBase.GetCurrentMethod();
			return (Task<Transaction>) InvokeMethod(method, new object[] { duration, gameLogic, options });
		}
		
	}
}
#endif
